name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install socat
        run: sudo apt-get install -y socat
      - name: cargo build
        run: cargo build --verbose

  unit-tests:
    name: Unit tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Use cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo test
        run: SNELDB_CONFIG='config/test.toml' cargo test --verbose

  e2e-tests:
    name: E2E tests
    # Keep needs: build if you want ordering, but don't rely on its outputs.
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: "1"
      RUST_LOG: info
      SNELDB_CONFIG: config/dev.toml
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        # Pin stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (best-effort)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install socat
        run: sudo apt-get install -y socat

      # If your tests need dirs/sockets, create them
      - name: Prepare runtime dirs
        run: mkdir -p /tmp/sneldb /var/run/sneldb || true

      # Build again in this job so binaries exist on this VM
      - name: Build
        run: cargo build --verbose

      # Optional: show binaries present for sanity
      - name: List binaries
        run: ls -lah target/debug || true

      # Run your E2E runner
      - name: Run E2E test runner
        run: cargo run --bin test_runner

  # Optional: docs check so you can require it too
  mdbook:
    name: mdBook build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with:
          tool: mdbook
      - name: Build docs
        working-directory: docs
        run: mdbook build
